/// Copyright (C) 2012-2014 Soomla Inc.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///      http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.

using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Soomla;

namespace Soomla.Levelup {
	
	public class World : SoomlaEntity {
		private static string TAG = "SOOMLA World";

		public Gate Gate;
		public Dictionary<string, World> InnerWorlds = new Dictionary<string, World>();
		public List<World> InnerWorldsList {
			get { return InnerWorlds.Values.ToList(); }
		}
		public Dictionary<string, Score> Scores = new Dictionary<string, Score>();
		public List<Mission> Missions = new List<Mission>();

		public string IdForAutoGeneratedLevel(int idx) {
			return ID + "_level" + idx;
		}

		public World(String id)
			: this(id, null)
		{
		}

		public World(String id, Score score)
			: this(id, null, new Dictionary<string, World>(), new Dictionary<string, Score>(), new List<Mission>())
		{

			if (score != null) {
				SingleScore(score);
			}
		}

		public World(String id, int numLevels, Score score)
			: this(id, null)
		{
			for (int i=0; i<numLevels; i++) {
				Level aLvl = new Level(IdForAutoGeneratedLevel(i), score);
				this.InnerWorlds.Add(aLvl.ID, aLvl);
			}
		}

		public World(string id, Gate gate, Dictionary<string, World> innerWorlds, Dictionary<string, Score> scores, List<Mission> missions)
			: base(id)
		{
			this.InnerWorlds = (innerWorlds != null) ? innerWorlds : new Dictionary<string, World>();
			this.Scores = (scores != null) ? scores : new Dictionary<string, Score>();
			this.Gate = gate;
			this.Missions = (missions != null) ? missions : new List<Mission>();
		}

		public World(JSONObject jsonWorld)
			: base(jsonWorld)
		{	
			InnerWorlds = new Dictionary<string, World>();
			List<JSONObject> worldsJSON = jsonWorld[LUJSONConsts.LU_WORLDS].list;
			
			// Iterate over all inner worlds in the JSON array and for each one create
			// an instance according to the world type
			foreach (JSONObject worldJSON in worldsJSON) {
				World innerWorld = World.fromJSONObject(worldJSON);
				if (innerWorld != null) {
					InnerWorlds.Add(innerWorld.ID, innerWorld);
				}
			}
			
			Scores = new Dictionary<String, Score>();
			List<JSONObject> scoresJSON = jsonWorld[LUJSONConsts.LU_SCORES].list;
			
			// Iterate over all scores in the JSON array and for each one create
			// an instance according to the score type
			foreach (JSONObject scoreJSON in scoresJSON) {
				Score score = Score.fromJSONObject(scoreJSON);
				if (score != null) {
					Scores.Add(score.ID, score);
				}
			}

			Missions = new List<Mission>();
			List<JSONObject> missionsJSON = jsonWorld[LUJSONConsts.LU_MISSIONS].list;
			
			// Iterate over all challenges in the JSON array and create an instance for each one
			foreach (JSONObject missionJSON in missionsJSON) {
				Missions.Add(Mission.fromJSONObject(missionJSON));
			}
			
			JSONObject gateJSON = jsonWorld[LUJSONConsts.LU_GATE];
			if (gateJSON != null && gateJSON.keys != null && gateJSON.keys.Count > 0) {
				Gate = Gate.fromJSONObject (gateJSON);
			}
		}

		public override JSONObject toJSONObject() {
			JSONObject obj = base.toJSONObject();

			obj.AddField(JSONConsts.SOOM_CLASSNAME, GetType().Name);
			obj.AddField(LUJSONConsts.LU_GATE, (Gate==null ? new JSONObject(JSONObject.Type.OBJECT) : Gate.toJSONObject()));
			
			JSONObject worldsArr = new JSONObject(JSONObject.Type.ARRAY);
			foreach (World world in InnerWorlds.Values) {
				worldsArr.Add(world.toJSONObject());
			}
			obj.AddField(LUJSONConsts.LU_WORLDS, worldsArr);

			JSONObject scoresArr = new JSONObject(JSONObject.Type.ARRAY);
			foreach (Score score in Scores.Values) {
				scoresArr.Add(score.toJSONObject());
			}
			obj.AddField(LUJSONConsts.LU_SCORES, scoresArr);

			JSONObject missionsArr = new JSONObject(JSONObject.Type.ARRAY);
			foreach (Mission mission in Missions) {
				missionsArr.Add(mission.toJSONObject());
			}
			obj.AddField(LUJSONConsts.LU_MISSIONS, missionsArr);
			
			return obj;
		}

		public static World fromJSONObject(JSONObject worldObj) {
			string className = worldObj[JSONConsts.SOOM_CLASSNAME].str;
			
			World world = (World) Activator.CreateInstance(Type.GetType("Soomla.Levelup." + className), new object[] { worldObj });
			
			return world;
		}

#if UNITY_ANDROID 
		//&& !UNITY_EDITOR
		public AndroidJavaObject toJNIObject() {
			using(AndroidJavaClass jniWorldClass = new AndroidJavaClass("com.soomla.levelup.World")) {
				return jniWorldClass.CallStatic<AndroidJavaObject>("fromJSONString", toJSONObject().print());
			}
		}
#endif
		public void AddInnerWorld(World world) {
			InnerWorlds.Add(world.ID, world);
		}

		public void AddMission(Mission mission) {
			Missions.Add(mission);
		}

		/** For Single Score **/

		private string _singleScoreId;
		public void SingleScore(Score score) {
			// adds only one score to the Scores dict
			Scores = new Dictionary<string, Score>();
			Score oneScore = Score.fromJSONObject(score.toJSONObject());
			oneScore.ID = oneScore.ID + "_" + this.ID;
			_singleScoreId = oneScore.ID;
			Scores.Add(oneScore.ID, oneScore);
		}

		public void SetSingleScoreValue(double amount) {
			SetScoreValue(_singleScoreId, amount);
		}

		public void DecSingleScore(double amount) {
			DecScore(_singleScoreId, amount);
		}

		public void IncSingleScore(double amount) {
			IncScore(_singleScoreId, amount);
		}

		public Score GetSingleScore() {
			return Scores[_singleScoreId];
		}

		public double InnerWorldsSingleRecords() {
			double ret = 0;
			foreach(World world in InnerWorlds.Values) {
				ret += world.GetSingleScore().Record;
			}
			return ret;
		}




		/** For more than one Score **/

		public void ResetScores(bool save) {
			if (Scores == null || Scores.Count == 0) {
				SoomlaUtils.LogError(TAG, "(ResetScores) You don't have any scores defined in this world. World id: " + ID);
				return;
			}
			
			foreach (Score score in Scores.Values) {
				score.Reset(save);
			}
		}

		public void DecScore(string scoreId, double amount) {
			Scores[scoreId].Dec(amount);
		}

		public void IncScore(string scoreId, double amount) {
			Scores[scoreId].Inc(amount);
		}

		public Dictionary<string, double> GetRecordScores() {
			Dictionary<string, double> records = new Dictionary<string, double>();
			foreach(Score score in Scores.Values) {
				records.Add(score.ID, score.Record);
			}
			
			return records;
		}

		public Dictionary<string, double> GetLatestScores() {
			Dictionary<string, double> latest = new Dictionary<string, double>();
			foreach (Score score in Scores.Values) {
				latest.Add(score.ID, score.Latest);
			}
			
			return latest;
		}

		public void SetScoreValue(string id, double scoreVal) {
			SetScoreValue(id, scoreVal, false);
		}

		public void SetScoreValue(string id, double scoreVal, bool onlyIfBetter) {
			Score score = Scores[id];
			if (score == null) {
				SoomlaUtils.LogError(TAG, "(setScore) Can't find score id: " + id + "  world id: " + this.ID);
				return;
			}
			score.SetTempScore(scoreVal, onlyIfBetter);
		}


		/** Completion **/

		public bool IsCompleted() {
			return WorldStorage.IsCompleted(this);
		}

		public virtual void SetCompleted(bool completed) {
			SetCompleted(completed, false);
		}
		public void SetCompleted(bool completed, bool recursive) {
			if (recursive) {
				foreach (World world in InnerWorlds.Values) {
					world.SetCompleted(completed, true);
				}
			}
			WorldStorage.SetCompleted(this, completed);
		}


		/** Reward Association **/

		public void AssignReward(Reward reward) {
			String olderReward = GetAssignedRewardId();
			if (!string.IsNullOrEmpty(olderReward)) {
				Reward oldReward = LevelUp.GetInstance().GetReward(olderReward);
				if (oldReward != null) {
					oldReward.Take();
				}
			}

			// We have to make sure it's a repeatable reward even if no one told us it is.
			// There's no real reason why it won't be a repeeatable.
			if (!reward.Repeatable) {
				reward.Repeatable = true;
			}

			reward.Give();
			WorldStorage.SetReward(this, reward.ID);
		}
		
		public String GetAssignedRewardId() {
			return WorldStorage.GetAssignedReward(this);
		}


		public bool CanStart() {
			return Gate == null || Gate.IsOpen();
		}

	}
}

